{"version":3,"file":"static\\development\\pages\\index.js","sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@babel/runtime-corejs2/core-js/json/stringify.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/create.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/define-property.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-prototype-of.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/set-prototype-of.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/parse-int.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/promise.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/symbol.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/symbol/iterator.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/createClass.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/inherits.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/setPrototypeOf.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/typeof.js","webpack:///./node_modules/@babel/runtime-corejs2/regenerator/index.js","webpack:///./pages/Cpn_FindSingleWord.jsx","webpack:///./pages/Cpn_SingleWordAllInfo.jsx","webpack:///./pages/Cpn_TextArea.jsx","webpack:///./pages/Cpn_selectedContents.jsx","webpack:///./pages/Cpn_sliceArrWordName.jsx","webpack:///./pages/index.jsx","webpack:///./store/fnCreateObjAction.js","webpack:///./store/fnReducer.js","webpack:///./store/myFunc.js","webpack:///./store/objStore.js","webpack:///external \"axios\"","webpack:///external \"core-js/library/fn/json/stringify\"","webpack:///external \"core-js/library/fn/object/create\"","webpack:///external \"core-js/library/fn/object/define-property\"","webpack:///external \"core-js/library/fn/object/get-prototype-of\"","webpack:///external \"core-js/library/fn/object/set-prototype-of\"","webpack:///external \"core-js/library/fn/parse-int\"","webpack:///external \"core-js/library/fn/promise\"","webpack:///external \"core-js/library/fn/symbol\"","webpack:///external \"core-js/library/fn/symbol/iterator\"","webpack:///external \"react\"","webpack:///external \"react-dom\"","webpack:///external \"redux\"","webpack:///external \"regenerator-runtime\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"core-js/library/fn/json/stringify\");","module.exports = require(\"core-js/library/fn/object/create\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/get-prototype-of\");","module.exports = require(\"core-js/library/fn/object/set-prototype-of\");","module.exports = require(\"core-js/library/fn/parse-int\");","module.exports = require(\"core-js/library/fn/promise\");","module.exports = require(\"core-js/library/fn/symbol\");","module.exports = require(\"core-js/library/fn/symbol/iterator\");","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import _Promise from \"../../core-js/promise\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import _Object$defineProperty from \"../../core-js/object/define-property\";\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n\n    _Object$defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import _Object$defineProperty from \"../../core-js/object/define-property\";\nexport default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import _Object$getPrototypeOf from \"../../core-js/object/get-prototype-of\";\nimport _Object$setPrototypeOf from \"../../core-js/object/set-prototype-of\";\nexport default function _getPrototypeOf(o) {\n  _getPrototypeOf = _Object$setPrototypeOf ? _Object$getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || _Object$getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import _Object$create from \"../../core-js/object/create\";\nimport setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = _Object$create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","import _Object$setPrototypeOf from \"../../core-js/object/set-prototype-of\";\nexport default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = _Object$setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import _Symbol$iterator from \"../../core-js/symbol/iterator\";\nimport _Symbol from \"../../core-js/symbol\";\n\nfunction _typeof2(obj) { if (typeof _Symbol === \"function\" && typeof _Symbol$iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof _Symbol === \"function\" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof _Symbol === \"function\" && _typeof2(_Symbol$iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof _Symbol === \"function\" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}","module.exports = require(\"regenerator-runtime\");\n","//查找单个单词\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport objStore from '../store/objStore.js'\r\nimport * as moduleActionFactory from '../store/fnCreateObjAction.js'\r\nimport * as moduleMyfunc from '../store/myFunc.js'\r\n\r\n\r\n\r\nexport default class Cpn_FindSingleWord extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = objStore.getState() //从银行拿到默认的state对象\r\n        objStore.subscribe(this.fn_updateThisState) //监听银行(的财务专家)对state对象的更新, 一旦监听到有新修改, 就执行回调函数fn_updateThisState\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div>\r\n                    {/*单词搜索框*/}\r\n                    <input type=\"text\" value={this.state.word_currentFind}\r\n                           onChange={() => {\r\n                               moduleMyfunc.fn_发送命令书_双向绑定word_currentFind(event)\r\n                           }}/>\r\n\r\n                    {/*按钮, 用来搜索单词*/}\r\n                    <input type=\"button\"\r\n                           value={'查找单个单词'}\r\n                           onClick={() => {\r\n                               moduleMyfunc.fn_发送命令书_搜索单词(this.state.word_currentFind)\r\n                           }}/>\r\n\r\n                    {/*重复确认当前查找的单词, 并显示该单词在arr_AllWords中的索引*/}\r\n                    <p>当前查找的单词: {this.state.word_currentFind} | 索引值为: {this.state.index_wordCurrentFind}</p>\r\n                </div>\r\n                <hr/>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n\r\n    fn_updateThisState = () => { //一旦监听到财务专家更新了state对象, 就执行本回调函数\r\n        this.setState(objStore.getState())\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","//单个单词在柯林斯中的详细内容\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport objStore from '../store/objStore.js'\r\nimport * as moduleAction from '../store/fnCreateObjAction.js'\r\nimport * as moduleMyfunc from \"../store/myFunc\";\r\n\r\n\r\nexport default class Cpn_SingleWordAllInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = objStore.getState() //从银行拿到默认的state对象\r\n        objStore.subscribe(this.fn_updateThisState)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <div> kollins中对本单词的解释:\r\n                    <p>索引值为: {this.state.index_wordCurrentFind}</p>\r\n                    <p>词头: {this.state.word_name} | 音标: {this.state.word_yinBiao}</p>\r\n                    <p>词根: {this.state.word_ciGeng}</p>\r\n\r\n                    <div style={objCss.css单个单词搜索}>所有释例:\r\n                        {this.state.word_ArrDef.map((strItem, index, arr) => {\r\n                            return (<p key={index}\r\n                                       onClick={(event) => {\r\n                                           moduleMyfunc.fn_发送命令书_更新arrSelectedContent(event.target.innerText)\r\n                                       }}>{strItem}</p>)\r\n                        })}\r\n                    </div>\r\n                </div>\r\n\r\n                <hr/>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    fn_updateThisState = () => { //一旦监听到财务专家更新了state对象, 就执行本回调函数\r\n        this.setState(objStore.getState())\r\n    }\r\n\r\n}\r\n\r\n//----------------------------------------\r\n\r\nlet objCss = {\r\n    css单个单词搜索: {height: \"200px\", border: \"1px solid\", overflow: \"auto\"},\r\n}\r\n\r\n","/*\r\n多行文本框, 专门用来存放选出的句子的string,\r\n表单会提交这个文本框中的值, 到后端, 并用fs来保存到文件中.\r\naction=\"#\" 表示 本表单提交给本页自己.\r\n */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport objStore from '../store/objStore.js'\r\nimport * as moduleAction from '../store/fnCreateObjAction.js'\r\nimport * as moduleMyfunc from \"../store/myFunc\";\r\n\r\n\r\nexport default class Cpn_TextArea extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = objStore.getState() //从银行拿到默认的state对象\r\n        objStore.subscribe(this.fn_updateThisState)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n\r\n                {/*按钮: 把选出内容添加到文本框*/}\r\n                <input type=\"button\"\r\n                       value={'添加到下面的文本框中'}\r\n                       onClick={() => {\r\n                           moduleMyfunc.fn_发送命令书_更新str_textArea()\r\n                       }}\r\n                />\r\n\r\n                <form action=\"#\"\r\n                      method=\"get\"\r\n                      // onSubmit={() => { //此方式被验证为不可行.\r\n                      //     moduleMyfunc.fn_发送命令书_获取切片中的词头数组()\r\n                      //     /*注意!!! 这里一定要重新获取切片中的词头!!\r\n                      //     因为你这里的词头数组, 是页面渲染后, 再来用按钮手动从state中拿到的,\r\n                      //     所以并非是页面渲染前的state中的原始数据,\r\n                      //     所以当本表单被提交后, 后天拿到的state中的数据都会被清空!\r\n                      //     所以你必须在表单提交后, 再次来获取这个词头数组, 才能保持页面上这块数据的永远显示.\r\n                      //     */\r\n                      // }}\r\n                >\r\n\r\n                    {/*多行文本框, 存放已选出来的句子*/}\r\n                    <textarea rows=\"10\" cols=\"50\"\r\n                              name={'area_StrSelected'}\r\n                              value={this.state.str_textArea}\r\n                              onChange={() => {\r\n                                  moduleMyfunc.fn_发送命令书_可编辑str_textArea(event.target.value)\r\n                              }}/>\r\n                    <br/>\r\n\r\n                    {/*按钮:清空文本框*/}\r\n                    <input type=\"button\"\r\n                           value={'清空'}\r\n                           onClick={() => {\r\n                               moduleMyfunc.fn_发送命令书_清空str_textArea()\r\n                           }}/>\r\n                    &nbsp;\r\n\r\n                    {/*按钮:保存文本框中的值到电脑文件*/}\r\n                    <input type=\"submit\" value=\"让服务器保存文件到电脑上\"/>\r\n\r\n                </form>\r\n                <hr/>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    fn_updateThisState = () => { //一旦监听到财务专家更新了state对象, 就执行本回调函数\r\n        this.setState(objStore.getState())\r\n    }\r\n\r\n}\r\n","//选出的释义与例句内容\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as moduleMyfunc from '../store/myFunc.js'\r\n\r\n\r\nimport objStore from '../store/objStore.js'\r\nimport * as moduleAction from '../store/fnCreateObjAction.js'\r\n\r\n\r\nexport default class Cpn_selectedContents extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = objStore.getState() //从银行拿到默认的state对象\r\n        objStore.subscribe(this.fn_updateThisState)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <p>选出的释义与例句内容:</p>\r\n\r\n                <div style={objCss.css选出的内容}>\r\n                    {this.state.arr_selectedContent\r\n                        .map((item, index, arr) => {\r\n                            return (<p key={index}\r\n                                       onClick={() => {\r\n                                           moduleMyfunc.fn_发送命令书_从选出内容的数组中删除本元素(index)\r\n                                       }}>{item}</p>)\r\n                        })}\r\n                </div>\r\n\r\n                <hr/>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    fn_updateThisState = () => { //一旦监听到财务专家更新了state对象, 就执行本回调函数\r\n        this.setState(objStore.getState())\r\n    }\r\n\r\n}\r\n\r\n//----------------------------------------\r\n\r\nlet objCss = {\r\n    css选出的内容: {height: \"200px\", border: \"1px solid\", overflow: \"auto\"},\r\n}\r\n\r\n","//切片显示词头数组\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport objStore from '../store/objStore.js'\r\nimport * as moduleAction from '../store/fnCreateObjAction.js'\r\nimport * as moduleActionFactory from \"../store/fnCreateObjAction\";\r\nimport * as moduleMyfunc from '../store/myFunc.js'\r\n\r\nexport default class Cpn_sliceArrWordName extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = objStore.getState() //从银行拿到默认的state对象\r\n        objStore.subscribe(this.fn_updateThisState)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <div>\r\n                    {/*切片区间的输入框*/}\r\n                    indexStart:<input type=\"text\"\r\n                                      size='5'\r\n                                      value={this.state.index_start}\r\n                                      onChange={() => {\r\n                                          moduleMyfunc.fn_发送命令书_更新indexStart(event)\r\n                                      }}/>\r\n                    - indexEnd:<input type=\"text\"\r\n                                      size='5'\r\n                                      value={this.state.index_end}\r\n                                      onChange={() => {\r\n                                          moduleMyfunc.fn_发送命令书_更新indexEnd(event)\r\n                                      }}/>\r\n\r\n                    <input type=\"button\"\r\n                           value={'显示切片(数组)中的词头'}\r\n                           onClick={() => {\r\n                               moduleMyfunc.fn_发送命令书_获取切片中的词头数组()\r\n                           }}\r\n                    />\r\n                    &nbsp;\r\n\r\n\r\n                    {/*下20个单词*/}\r\n                    <input type=\"button\" value='下20个单词'\r\n                           onClick={() => {\r\n                               moduleMyfunc.fn_发送命令书_获取下20个单词()\r\n                           }}\r\n                    />\r\n                    &nbsp;\r\n\r\n                    {/*上20个单词*/}\r\n                    <input type=\"button\" value='上20个单词'\r\n                           onClick={() => {\r\n                               moduleMyfunc.fn_发送命令书_获取上20个单词()\r\n                           }}\r\n                    />\r\n\r\n\r\n                    {/*显示切片区间中的所有词头*/}\r\n                    <p>index [{this.state.index_start}-{this.state.index_end}] 中的词头有:</p>\r\n\r\n                    <div style={objCss.容器}>\r\n                        {this.state.arr_wordNameInSlice.map((itemWordName, index, arr) => {\r\n                            return <span key={index} style={objCss.子项}\r\n                                         onClick={() => {\r\n                                             moduleMyfunc.fn_发送命令书_搜索单词(event.target.innerText)\r\n                                         }}\r\n                            >{itemWordName}</span>\r\n                        })}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <hr/>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n\r\n    fn_updateThisState = () => { //一旦监听到财务专家更新了state对象, 就执行本回调函数\r\n        this.setState(objStore.getState())\r\n    }\r\n\r\n}\r\n\r\n//----------------------------------------\r\n\r\nlet objCss = {\r\n    容器: { /*里面有专属于容器的flex属性*/\r\n        display: 'flex',\r\n        height: '200px',\r\n        border: \"solid 1px\",\r\n        // flexDirection: 'row-reverse', /*每行中的元素, 从右到左排*/\r\n        flexWrap: 'wrap', /*一行超过容器宽度, 就换行*/\r\n        alignContent: \"flex-start\", //行与行的行距, 不平均分配容器的高度, 而是采用默认的固定行距.\r\n        overflow: \"auto\", //超出高度则使用滚动条,\r\n    },\r\n\r\n    子项: { /*里面有专属于子项的flex属性*/\r\n        width: '33.33%',\r\n        // flexGrow: 1, //一行中无论有几个元素, 都平均分配容器的宽度\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport objStore from '../store/objStore.js'\r\nimport * as moduleAction from '../store/fnCreateObjAction.js'\r\n\r\nimport Cpn_FindSingleWord from '../pages/Cpn_FindSingleWord'\r\nimport Cpn_sliceArrWordName from '../pages/Cpn_sliceArrWordName'\r\nimport Cpn_SingleWordAllInfo from '../pages/Cpn_SingleWordAllInfo'\r\nimport Cpn_selectedContents from '../pages/Cpn_selectedContents'\r\nimport Cpn_TextArea from '../pages/Cpn_TextArea'\r\n\r\n\r\nexport default class Cpn_Index extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = objStore.getState() //从银行拿到默认的state对象\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <p>kollins主控台</p>\r\n\r\n                <div id ='id词头切片数组' style={objCss.css词头切片数组}>\r\n                    <Cpn_sliceArrWordName/>\r\n                </div>\r\n\r\n                <div id='id其他div元素的整体' style={objCss.css其他div元素的整体}>\r\n                    <Cpn_FindSingleWord/>\r\n                    <Cpn_SingleWordAllInfo/>\r\n                    <Cpn_selectedContents/>\r\n                    <Cpn_TextArea/>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        let divHeight = document.getElementById('id词头切片数组').offsetHeight\r\n\r\n        //拿到 Window.localStorage对象, 我们把index_start 和 index_end 属性, 存放在Window.localStorage对象中, 免得每次刷新页面, 即提交表单后, 会导致index_start 和 index_end 这两个属性的被重置.\r\n        // function fn_getWindowLocalStorage() {\r\n        //     let objStorage = window.localStorage;\r\n        //     objStorage.indexStart = 0 //进行初始化\r\n        //     objStorage.indexEnd = 19\r\n        // }\r\n\r\n        // fn_getWindowLocalStorage()\r\n\r\n    }\r\n\r\n}\r\n\r\nlet objCss = {\r\n    css词头切片数组: {position: \"fixed\",background:\"rgba(240,240,240,1)\" }, //让这个div元素浮动固定.\r\n    /*注意: flex是不支持浮动的, 但是我们可以在运用了flex样式的元素的外面,再包一层div,\r\n    对这个div运用传统的css样式, 就能使用position来浮动了.\r\n     */\r\n    css其他div元素的整体:{marginTop:\"360px\"}\r\n}\r\n\r\n\r\n// let objCss = {\r\n//     容器: { /**/\r\n//         display: 'flex',\r\n//         height: '200px',\r\n//         border: \"solid 1px\",\r\n//         // flexDirection: 'row-reverse', /*每行中的元素, 从右到左排*/\r\n//         flexWrap: 'wrap', /*一行超过容器宽度, 就换行*/\r\n//         alignContent: \"flex-start\", //行与行的行距, 不平均分配容器的高度, 而是采用默认的固定行距.\r\n//     },\r\n//\r\n//     项目: {\r\n//         width: '33.33%',\r\n//         // flexGrow: 1, //一行中无论有几个元素, 都平均分配容器的宽度\r\n//     }\r\n// }","//命令书制造工厂\r\n\r\nexport function fn_创建命令书_update_WordCurrentFind(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_更新WordCurrentFind',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\n\r\nexport function fn_创建命令书_findSingleWord(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_查找SingleWord',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\nexport function fn_创建命令书_update_indexStart(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_更新indexStart',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\nexport function fn_创建命令书_update_indexEnd(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_更新indexEnd',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\nexport function fn_创建命令书_update_arrWordNameInSlice(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_更新arrWordNameInSlice',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\nexport function fn_创建命令书_获取下20个单词(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_获取下20个单词',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\nexport function fn_创建命令书_获取上20个单词(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_获取上20个单词',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function fn_创建命令书_udpate_arrSelectedContent(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_更新arr_selectedContent',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\n\r\nexport function fn_创建命令书_从选出内容的数组中删除本元素(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_从选出内容的数组中删除本元素',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\nexport function fn_创建命令书_更新str_textArea(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_更新str_textArea',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\nexport function fn_创建命令书_清空str_textArea(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_清空str_textArea',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\nexport function fn_创建命令书_可编辑str_textArea(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_可编辑str_textArea',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\n\r\n\r\n\r\n","//财务专家\r\n\r\nimport axios from 'axios'\r\nimport * as moduleMyfunc from '../store/myFunc.js'\r\n\r\n\r\n//客户托管在这里的默认的state对象\r\nlet defaultState = {\r\n    // url_BigObjJsonKollins: './static/+json所有柯林斯单词.json', //kollins json路径\r\n    url_BigArrJsonKollins: './static/+arr所有柯林斯单词.json',\r\n    // obj_AllWords: {}, //存放从json文件(一个大的obj对象)中读取到的obj_objJson\r\n    arr_KollinsAllWords: [], //存放从json文件(一个大的数组)中读取到的arr_objJson\r\n\r\n    word_currentFind: '', //当前查找的词头\r\n    index_wordCurrentFind: -1, //当前查找的单词, 在arr_AllWords中的索引值\r\n\r\n    num_OfElementsInSlice: 0, //想切含有多少个元素的切片? 范围是多少? 比如20个元素, 还是30个元素?\r\n\r\n    index_start: 0, //数组切片的起始索引值\r\n    index_end: 19, //数组切片的尾索引值\r\n    // index_start: objStorage.indexStart,\r\n    // index_end: objStorage.indexEnd,\r\n\r\n    arr_wordNameInSlice: [], //存放对数组切片后, 里面的所有词头组成的数组\r\n\r\n    word_name: '', //词头\r\n    word_ciGeng: '', //词根\r\n    word_yinBiao: '', //音标\r\n    word_ArrDef: [], //释例数组, 已经过扁平化一维处理.\r\n\r\n    arr_selectedContent: [], //存放选出的释义与例句内容\r\n    str_textArea: '', //将选出的内容,放入文本框中. 方便发送给后端node.js来另存文件.\r\n}\r\n\r\n\r\n//先从json文件中, 拿到所有的kollins单词数据, 并赋值给defaultState对象的arr_KollinsAllWords属性\r\nfn_Set_ArrAllWords() //调用函数\r\n\r\n\r\n//财务专家函数\r\nlet fnReducer = (state = defaultState, objAction) => {\r\n    // console.log('财务专家收到命令书', objAction);\r\n\r\n    if (objAction.type === '命令书_更新WordCurrentFind') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.word_currentFind = objAction.value\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_更新indexStart') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.index_start = objAction.value\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_更新indexEnd') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.index_end = objAction.value\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_更新arr_selectedContent') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.arr_selectedContent.push(objAction.value)\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_从选出内容的数组中删除本元素') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        let index = objAction.value //要删除的数组元素的索引值\r\n        newState.arr_selectedContent.splice(index, 1)//删除数组中指定索引处的元素. arrayObject.splice(index,howmany,item1,.....,itemX)\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_更新str_textArea') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        let str = ''\r\n        let str词头 = newState.word_name + '\\r\\n'\r\n        let str音标 = newState.word_yinBiao + '\\r\\n'\r\n        let str词根 = '-> ' + newState.word_ciGeng + '\\r\\n\\r\\n'\r\n\r\n        str = str词头 + str音标 + str词根\r\n\r\n        str += moduleMyfunc.fn_将arr_selectedContent转换成str_textArea(newState.arr_selectedContent)\r\n        newState.str_textArea = str\r\n        return newState\r\n    }\r\n\r\n\r\n    //搜索单个单词,并将内容填充到state中的各对应字段中\r\n    if (objAction.type === '命令书_查找SingleWord') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.word_currentFind = objAction.value\r\n\r\n        // 用 for...of 来做不起作用, 不知原因为何??\r\n        // for (let index = 0; index <= newState.arr_KollinsAllWords.length, index++;) {\r\n        //     if (newState.arr_KollinsAllWords[index][\"key词头\"] === objAction.value) {\r\n        //         newState.index_wordCurrentFind = index\r\n        //         newState.word_name = newState.arr_KollinsAllWords[index][\"key词头\"]\r\n        //         newState.word_yinBiao = newState.arr_KollinsAllWords[index][\"key音标\"]\r\n        //         newState.word_ciGeng = newState.arr_KollinsAllWords[index][\"key词根\"]\r\n        //         newState.word_ArrDef = moduleMyfunc.fn_处理所有释例到一维数组(newState.arr_KollinsAllWords[index][\"key所有释例\"])\r\n        //         newState.arr_selectedContent = [] //当重新查询单词时, 就清空上一次选出的内容\r\n        //         break\r\n        //     }\r\n        // }\r\n        //\r\n\r\n        newState.arr_KollinsAllWords.forEach((itemWord, index, arr) => {\r\n                if (itemWord[\"key词头\"] === objAction.value) {\r\n                    newState.index_wordCurrentFind = index\r\n                    newState.word_name = itemWord[\"key词头\"]\r\n                    newState.word_yinBiao = itemWord[\"key音标\"]\r\n                    newState.word_ciGeng = itemWord[\"key词根\"]\r\n                    newState.word_ArrDef = moduleMyfunc.fn_处理所有释例到一维数组(itemWord[\"key所有释例\"])\r\n                    newState.arr_selectedContent = [] //当重新查询单词时, 就清空上一次选出的内容\r\n                }\r\n            }\r\n        )\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_更新arrWordNameInSlice') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.arr_wordNameInSlice = fn_获取数组切片区间中的词头(newState.arr_KollinsAllWords, newState.index_start, newState.index_end)\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_获取下20个单词') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.index_start = parseInt(newState.index_end) + 1\r\n        newState.index_end = parseInt(newState.index_start) + 19\r\n        newState.arr_wordNameInSlice = fn_获取数组切片区间中的词头(newState.arr_KollinsAllWords, newState.index_start, newState.index_end)\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_获取上20个单词') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.index_start = parseInt(newState.index_start) - 20\r\n        newState.index_end = parseInt(newState.index_end) - 20\r\n        newState.arr_wordNameInSlice = fn_获取数组切片区间中的词头(newState.arr_KollinsAllWords, newState.index_start, newState.index_end)\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_清空str_textArea') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.str_textArea = '' //除了清空文本框中的值外\r\n        newState.arr_selectedContent = []\r\n        /*也要清空选出的句子, 别忘了这一点!\r\n         因为你添加到str_textArea中的句子, 是从arr_selectedContent中来挑选的,\r\n         如果不清空arr_selectedContent, 里面的残留, 会造成str_textArea里的脏数据.\r\n         */\r\n        return newState\r\n    }\r\n\r\n    if (objAction.type === '命令书_可编辑str_textArea') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.str_textArea = objAction.value\r\n        return newState\r\n    }\r\n\r\n\r\n    return state //如果没有进入上面的if语句而返回一个newState, 本函数也要返回一个默认的defaultState.\r\n}\r\n\r\nexport default fnReducer\r\n\r\n\r\n//----------------------------------------\r\n\r\n//从json文件中, 拿到所有的kollins单词数据, 返回一个promise对象\r\nasync function fnPms_getWordArr_FromJsonFile(urlJson) {\r\n    let Pms_ArrAllWords = await axios.get(urlJson)\r\n        .then(res => {\r\n            return res.data\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n    return Pms_ArrAllWords\r\n}\r\n\r\n\r\n//将拿到的所有柯林斯单词, 赋值给defaultState对象的arr_AllWords属性\r\nfunction fn_Set_ArrAllWords() {\r\n    fnPms_getWordArr_FromJsonFile(defaultState.url_BigArrJsonKollins)\r\n        .then(res => {\r\n            defaultState.arr_KollinsAllWords = res\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n}\r\n\r\n\r\nfunction fn_获取数组切片区间中的词头(arr, indexStart, indexEnd) {\r\n    let arrSlice = arr.slice(indexStart, indexEnd)\r\n    let arrWordName = arrSlice.map((item, index, arr) => {\r\n        return item['key词头']\r\n    })\r\n    return arrWordName\r\n}\r\n\r\n\r\n","import objStore from \"./objStore\";\r\nimport * as moduleActionFactory from \"./fnCreateObjAction\";\r\n\r\n\r\nexport let fn_发送命令书_双向绑定word_currentFind = (event) => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_update_WordCurrentFind(event.target.value))\r\n}\r\n\r\nexport let fn_发送命令书_搜索单词 = (wordToFind) => { //搜索单个单词的柯林斯信息\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_findSingleWord(wordToFind))\r\n}\r\n\r\nexport let fn_发送命令书_更新indexStart = (event) => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_update_indexStart(event.target.value))\r\n}\r\n\r\nexport let fn_发送命令书_更新indexEnd = (event) => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_update_indexEnd(event.target.value))\r\n}\r\n\r\nexport let fn_发送命令书_获取切片中的词头数组 = () => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_update_arrWordNameInSlice())\r\n}\r\n\r\nexport let fn_发送命令书_获取下20个单词 = () => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_获取下20个单词())\r\n}\r\n\r\nexport let fn_发送命令书_获取上20个单词 = () => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_获取上20个单词())\r\n}\r\n\r\nexport let fn_发送命令书_更新arrSelectedContent = () => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_udpate_arrSelectedContent(event.target.innerText))\r\n}\r\n\r\nexport let fn_发送命令书_从选出内容的数组中删除本元素 = (index) => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_从选出内容的数组中删除本元素(index))\r\n}\r\n\r\nexport let fn_发送命令书_更新str_textArea = () => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_更新str_textArea())\r\n}\r\n\r\nexport let fn_发送命令书_清空str_textArea = () => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_清空str_textArea())\r\n}\r\n\r\nexport let fn_发送命令书_可编辑str_textArea = () => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_可编辑str_textArea())\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//----------------------------------------\r\n\r\nexport let fn_处理所有释例到一维数组 = (arr所有释例) => {\r\n    let newArr = [] //存放\"arr所有释例\"在经过处理后的扁平化一维数组\r\n\r\n    arr所有释例.forEach((item单个释例, index, arr) => {\r\n        newArr.push(index + 1) //把编号也作为数组的一个item添加进去, 方便我们查看该单词到底有多少条释义.\r\n\r\n        let arr单个释例的释义与例句 = item单个释例.split('|') //str.split([separator[, limit]])方法, 使用指定的分隔符字符串将一个String对象分割成字符串数组. 返回一个字符串数组,不包括 separator 自身。\r\n        arr单个释例的释义与例句.forEach((item, index, arr) => {\r\n            newArr.push(item)\r\n        })\r\n        newArr.push('--------')\r\n    })\r\n\r\n    return newArr\r\n}\r\n\r\n//将\"选出的内容的数组\"转换成纯字符串\r\nexport let fn_将arr_selectedContent转换成str_textArea = (arr) => {\r\n    let str = ''\r\n    if (arr.length !== 0) {\r\n        arr.map(item => {\r\n            str += item + '\\r\\n'\r\n        })\r\n    }\r\n    return str\r\n}","// 银行\r\n\r\nimport {createStore} from 'redux'\r\nimport fnReducer from './fnReducer.js'\r\n\r\nlet objStore = createStore(fnReducer)\r\n\r\nexport default objStore","module.exports = require(\"axios\");","module.exports = require(\"core-js/library/fn/json/stringify\");","module.exports = require(\"core-js/library/fn/object/create\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/get-prototype-of\");","module.exports = require(\"core-js/library/fn/object/set-prototype-of\");","module.exports = require(\"core-js/library/fn/parse-int\");","module.exports = require(\"core-js/library/fn/promise\");","module.exports = require(\"core-js/library/fn/symbol\");","module.exports = require(\"core-js/library/fn/symbol/iterator\");","module.exports = require(\"react\");","module.exports = require(\"react-dom\");","module.exports = require(\"redux\");","module.exports = require(\"regenerator-runtime\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxFA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpCA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiCA;AACA;AACA;AACA;AAlCA;AACA;AAAA;AACA;AAJA;AAIA;AACA;;;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAaA;;;;AA/BA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA+BA;AACA;AACA;AACA;AAhCA;AACA;AAAA;AAHA;AAIA;AACA;;;AACA;AACA;AAQA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAHA;AAIA;AAQA;;;;AA9BA;AACA;AACA;AAFA;AAwCA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;;;;;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA0DA;AACA;AACA;AACA;AA3DA;AACA;AAAA;AAHA;AAIA;AACA;;;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AAOA;;;;AAzDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA2BA;AACA;AACA;AACA;AA5BA;AACA;AAAA;AAHA;AAIA;AACA;;;AACA;AACA;AAIA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AAHA;AAIA;AAOA;;;;AA1BA;AACA;AACA;AAFA;AAoCA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAwEA;AACA;AACA;AACA;AAzEA;AACA;AAAA;AAHA;AAIA;AACA;;;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAUA;AAAA;AACA;AACA;AACA;AAHA;AAQA;AAAA;AACA;AACA;AACA;AAHA;AAUA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AASA;;;;AAtEA;AACA;AACA;AAFA;AAiFA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AARA;AAUA;AAAA;AACA;AACA;AAFA;AAXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAHA;AAGA;AACA;;;AACA;AACA;AAIA;AAAA;AAAA;AAIA;AAAA;AAAA;AAQA;;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;AArCA;AACA;AADA;AAyCA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;AAGA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAMA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtGA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAIA;AACA;AA7BA;AA6BA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAAA;;AAYA;AACA;AACA;;;;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AARA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAaA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;ACPA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}