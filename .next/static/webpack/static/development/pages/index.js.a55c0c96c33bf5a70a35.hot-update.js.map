{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.a55c0c96c33bf5a70a35.hot-update.js","sources":["webpack:///./pages/Cpn_SingleWordAllInfo.jsx","webpack:///./store/fnCreateObjAction.js","webpack:///./store/fnReducer.js","webpack:///./store/myFunc.js"],"sourcesContent":["//单个单词在柯林斯中的详细内容\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport objStore from '../store/objStore.js'\r\nimport * as moduleAction from '../store/fnCreateObjAction.js'\r\nimport * as moduleMyfunc from \"../store/myFunc\";\r\n\r\n\r\nexport default class Cpn_SingleWordAllInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = objStore.getState() //从银行拿到默认的state对象\r\n        objStore.subscribe(this.fn_updateThisState)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <div> kollins中对本单词的解释:\r\n                    <p>索引值为: {this.state.index_wordCurrentFind}</p>\r\n                    <p>词头: {this.state.word_name} | 音标: {this.state.word_yinBiao}</p>\r\n                    <p>词根: {this.state.word_ciGeng}</p>\r\n\r\n                    <div>所有释例:\r\n                        {this.state.word_ArrDef.map((strItem, index, arr) => {\r\n                            return (<p key={index}\r\n                                       onClick={(event) => {\r\n                                           moduleMyfunc.fn_发送命令书_更新arrSelectedContent(event.target.innerText)\r\n                                       }}>{strItem}</p>)\r\n                        })}\r\n                    </div>\r\n                </div>\r\n\r\n                <hr/>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    fn_updateThisState = () => { //一旦监听到财务专家更新了state对象, 就执行本回调函数\r\n        this.setState(objStore.getState())\r\n    }\r\n\r\n}","//命令书制造工厂\r\n\r\nexport function fn_创建命令书_update_WordCurrentFind(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_更新WordCurrentFind',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\n\r\nexport function fn_创建命令书_findSingleWord(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_查找SingleWord',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\nexport function fn_创建命令书_update_indexStart(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_更新indexStart',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\nexport function fn_创建命令书_update_indexEnd(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_更新indexEnd',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\nexport function fn_创建命令书_update_arrWordNameInSlice(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_更新arrWordNameInSlice',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\nexport function fn_创建命令书_获取下20个单词(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_获取下20个单词',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\n\r\nexport function fn_创建命令书_udpate_arrSelectedContent(valueNew) {\r\n    let objAction = {\r\n        type: '命令书_更新arr_selectedContent',\r\n        value: valueNew,\r\n    }\r\n    return objAction\r\n}\r\n\r\n\r\n\r\n\r\n","//财务专家\r\n\r\nimport axios from 'axios'\r\nimport * as moduleMyfunc from '../store/myFunc.js'\r\n\r\n\r\n//客户托管在这里的默认的state对象\r\nlet defaultState = {\r\n    // url_BigObjJsonKollins: './static/+json所有柯林斯单词.json', //kollins json路径\r\n    url_BigArrJsonKollins: './static/+arr所有柯林斯单词.json',\r\n    // obj_AllWords: {}, //存放从json文件(一个大的obj对象)中读取到的obj_objJson\r\n    arr_KollinsAllWords: [], //存放从json文件(一个大的数组)中读取到的arr_objJson\r\n\r\n    word_currentFind: '', //当前查找的词头\r\n    index_wordCurrentFind: -1, //当前查找的单词, 在arr_AllWords中的索引值\r\n\r\n    num_OfElementsInSlice: 0, //想切含有多少个元素的切片? 范围是多少? 比如20个元素, 还是30个元素?\r\n    index_start: 0, //数组切片的起始索引值\r\n    index_end: 19, //数组切片的尾索引值\r\n    arr_wordNameInSlice: [], //存放对数组切片后, 里面的所有词头组成的数组\r\n\r\n    word_name: '', //词头\r\n    word_ciGeng: '', //词根\r\n    word_yinBiao: '', //音标\r\n    word_ArrDef: [], //释例数组, 已经过扁平化一维处理.\r\n\r\n    arr_selectedContent: [], //存放选出的释义与例句内容\r\n    str_textArea: '', //将选出的内容,放入文本框中. 方便发送给后端node.js来另存文件.\r\n}\r\n\r\n\r\n//先从json文件中, 拿到所有的kollins单词数据, 并赋值给defaultState对象的arr_KollinsAllWords属性\r\nfn_Set_ArrAllWords() //调用函数\r\n\r\n\r\n//财务专家函数\r\nlet fnReducer = (state = defaultState, objAction) => {\r\n    // console.log('财务专家收到命令书', objAction);\r\n\r\n    if (objAction.type === '命令书_更新WordCurrentFind') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.word_currentFind = objAction.value\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_更新indexStart') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.index_start = objAction.value\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_更新indexEnd') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.index_end = objAction.value\r\n        return newState\r\n    }\r\n\r\n     if (objAction.type === '命令书_更新arr_selectedContent') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.index_end = objAction.value\r\n        return newState\r\n    }\r\n\r\n\r\n\r\n\r\n    //搜索单个单词,并将内容填充到state中的各对应字段中\r\n    if (objAction.type === '命令书_查找SingleWord') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.word_currentFind = objAction.value\r\n\r\n        newState.arr_KollinsAllWords.forEach((itemWord, index, arr) => {\r\n                if (itemWord[\"key词头\"] === objAction.value) {\r\n                    newState.index_wordCurrentFind = index\r\n                    newState.word_name = itemWord[\"key词头\"]\r\n                    newState.word_yinBiao = itemWord[\"key音标\"]\r\n                    newState.word_ciGeng = itemWord[\"key词根\"]\r\n                    newState.word_ArrDef = moduleMyfunc.fn_处理所有释例到一维数组(itemWord[\"key所有释例\"])\r\n                    newState.arr_selectedContent = [] //当重新查询单词时, 就清空上一次选出的内容\r\n                }\r\n            }\r\n        )\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_更新arrWordNameInSlice') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.arr_wordNameInSlice = fn_获取数组切片区间中的词头(newState.arr_KollinsAllWords, newState.index_start, newState.index_end)\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_获取下20个单词') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.index_start = parseInt(newState.index_end) + 1\r\n        newState.index_end = parseInt(newState.index_start) + 19\r\n        newState.arr_wordNameInSlice = fn_获取数组切片区间中的词头(newState.arr_KollinsAllWords, newState.index_start, newState.index_end)\r\n        return newState\r\n    }\r\n\r\n\r\n    return state //如果没有进入上面的if语句而返回一个newState, 本函数也要返回一个默认的defaultState.\r\n}\r\n\r\nexport default fnReducer\r\n\r\n\r\n//----------------------------------------\r\n\r\n//从json文件中, 拿到所有的kollins单词数据, 返回一个promise对象\r\nasync function fnPms_getWordArr_FromJsonFile(urlJson) {\r\n    let Pms_ArrAllWords = await axios.get(urlJson)\r\n        .then(res => {\r\n            return res.data\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n    return Pms_ArrAllWords\r\n}\r\n\r\n\r\n//将拿到的所有柯林斯单词, 赋值给defaultState对象的arr_AllWords属性\r\nfunction fn_Set_ArrAllWords() {\r\n    fnPms_getWordArr_FromJsonFile(defaultState.url_BigArrJsonKollins)\r\n        .then(res => {\r\n            defaultState.arr_KollinsAllWords = res\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n}\r\n\r\n\r\nfunction fn_获取数组切片区间中的词头(arr, indexStart, indexEnd) {\r\n    let arrSlice = arr.slice(indexStart, indexEnd)\r\n    let arrWordName = arrSlice.map((item, index, arr) => {\r\n        return item['key词头']\r\n    })\r\n    return arrWordName\r\n}\r\n","import objStore from \"./objStore\";\r\nimport * as moduleActionFactory from \"./fnCreateObjAction\";\r\n\r\n\r\nexport let fn_发送命令书_双向绑定word_currentFind = (event) => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_update_WordCurrentFind(event.target.value))\r\n}\r\n\r\nexport let fn_发送命令书_搜索单词 = (wordToFind) => { //搜索单个单词的柯林斯信息\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_findSingleWord(wordToFind))\r\n}\r\n\r\nexport let fn_发送命令书_更新indexStart = (event) => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_update_indexStart(event.target.value))\r\n}\r\n\r\nexport let fn_发送命令书_更新indexEnd = (event) => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_update_indexEnd(event.target.value))\r\n}\r\n\r\nexport let fn_发送命令书_获取切片中的词头数组 = () => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_update_arrWordNameInSlice())\r\n}\r\n\r\nexport let fn_发送命令书_获取下20个单词 = () => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_获取下20个单词())\r\n}\r\n\r\nexport let fn_发送命令书_更新arrSelectedContent = () => {\r\n    objStore.dispatch(moduleActionFactory.fn_创建命令书_udpate_arrSelectedContent(event.target.innerText))\r\n}\r\n\r\n\r\n//----------------------------------------\r\n\r\nexport let fn_处理所有释例到一维数组 = (arr所有释例) => {\r\n    let newArr = [] //存放\"arr所有释例\"在经过处理后的扁平化一维数组\r\n\r\n    arr所有释例.forEach((item单个释例, index, arr) => {\r\n        newArr.push(index + 1) //把编号也作为数组的一个item添加进去, 方便我们查看该单词到底有多少条释义.\r\n\r\n        let arr单个释例的释义与例句 = item单个释例.split('|') //str.split([separator[, limit]])方法, 使用指定的分隔符字符串将一个String对象分割成字符串数组. 返回一个字符串数组,不包括 separator 自身。\r\n        arr单个释例的释义与例句.forEach((item, index, arr) => {\r\n            newArr.push(item)\r\n        })\r\n        newArr.push('--------')\r\n    })\r\n\r\n    return newArr\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA+BA;AACA;AACA;AACA;AAhCA;AACA;AAAA;AAHA;AAIA;AACA;;;AACA;AACA;AAUA;AAAA;AACA;AACA;AACA;AAHA;AAIA;AAQA;;;;AA9BA;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAIA;AACA;AAzBA;AAyBA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAAA;;AAYA;AACA;AACA;;;;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AARA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAaA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}