{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.b42c1bbb06dd060c6240.hot-update.js","sources":["webpack:///./pages/Cpn_sliceArrWordName.jsx"],"sourcesContent":["//切片显示词头数组\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport objStore from '../store/objStore.js'\r\nimport * as moduleAction from '../store/fnCreateObjAction.js'\r\nimport * as moduleActionFactory from \"../store/fnCreateObjAction\";\r\nimport * as moduleMyfunc from '../store/myFunc.js'\r\n\r\nexport default class Cpn_sliceArrWordName extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = objStore.getState() //从银行拿到默认的state对象\r\n        objStore.subscribe(this.fn_updateThisState)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <div>\r\n                    {/*切片区间的输入框*/}\r\n                    indexStart:<input type=\"text\"\r\n                                      size='5'\r\n                                      value={this.state.index_start}\r\n                                      onChange={() => {\r\n                                          moduleMyfunc.fn_发送命令书_更新indexStart(event)\r\n                                      }}/>\r\n                    - indexEnd:<input type=\"text\"\r\n                                      size='5'\r\n                                      value={this.state.index_end}\r\n                                      onChange={() => {\r\n                                          moduleMyfunc.fn_发送命令书_更新indexEnd(event)\r\n                                      }}/>\r\n\r\n                    <input type=\"button\"\r\n                           value={'显示切片(数组)中的词头'}\r\n                           onClick={() => {\r\n                               moduleMyfunc.fn_发送命令书_获取切片中的词头数组()\r\n                           }}\r\n                    />\r\n                    &nbsp;\r\n\r\n\r\n                    {/*下20个单词*/}\r\n                    <input type=\"button\" value='下20个单词'\r\n                           onClick={() => {\r\n                               moduleMyfunc.fn_发送命令书_获取下20个单词()\r\n                           }}\r\n                    />\r\n\r\n\r\n                    {/*显示切片区间中的所有词头*/}\r\n                    <p>index [{this.state.index_start}-{this.state.index_end}] 中的词头有:</p>\r\n\r\n                    <div style={objCss.容器}>\r\n                        {this.state.arr_wordNameInSlice.map((itemWordName, index, arr) => {\r\n                            return <span key={index} style={objCss.子项}\r\n                                         onClick={() => {\r\n                                             moduleMyfunc.fn_发送命令书_搜索单词(event.target.innerText)\r\n                                         }}\r\n                            >{itemWordName}</span>\r\n                        })}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <hr/>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n\r\n    fn_updateThisState = () => { //一旦监听到财务专家更新了state对象, 就执行本回调函数\r\n        this.setState(objStore.getState())\r\n    }\r\n\r\n}\r\n\r\n//----------------------------------------\r\n\r\nlet objCss = {\r\n    容器: { /*里面有专属于容器的flex属性*/\r\n        display: 'flex',\r\n        height: '200px',\r\n        border: \"solid 1px\",\r\n        // flexDirection: 'row-reverse', /*每行中的元素, 从右到左排*/\r\n        flexWrap: 'wrap', /*一行超过容器宽度, 就换行*/\r\n        alignContent: \"flex-start\", //行与行的行距, 不平均分配容器的高度, 而是采用默认的固定行距.\r\n        overflow: \"auto\", //超出高度则使用滚动条,\r\n    },\r\n\r\n    子项: { /*里面有专属于子项的flex属性*/\r\n        width: '33.33%',\r\n        // flexGrow: 1, //一行中无论有几个元素, 都平均分配容器的宽度\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAgEA;AACA;AACA;AACA;AAjEA;AACA;AAAA;AAHA;AAIA;AACA;;;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAUA;AAAA;AACA;AACA;AACA;AAHA;AAUA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AASA;;;;AA9DA;AACA;AACA;AAFA;AAyEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AARA;AAUA;AAAA;AACA;AACA;AAFA;AAXA;;;;A","sourceRoot":""}