{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\n//财务专家\nimport axios from 'axios';\nimport * as moduleMyfunc from '../store/myFunc.js'; //客户托管在这里的默认的state对象\n\nvar defaultState = {\n  // url_BigObjJsonKollins: './static/+json所有柯林斯单词.json', //kollins json路径\n  url_BigArrJsonKollins: './static/+arr所有柯林斯单词.json',\n  // obj_AllWords: {}, //存放从json文件(一个大的obj对象)中读取到的obj_objJson\n  arr_KollinsAllWords: [],\n  //存放从json文件(一个大的数组)中读取到的arr_objJson\n  word_currentFind: '',\n  //当前查找的词头\n  index_wordCurrentFind: -1,\n  //当前查找的单词, 在arr_AllWords中的索引值\n  num_OfElementsInSlice: 0,\n  //想切含有多少个元素的切片? 范围是多少? 比如20个元素, 还是30个元素?\n  index_start: 0,\n  //数组切片的起始索引值\n  index_end: 19,\n  //数组切片的尾索引值\n  arr_wordNameInSlice: [],\n  //存放对数组切片后, 里面的所有词头组成的数组\n  word_name: '',\n  //词头\n  word_ciGeng: '',\n  //词根\n  word_yinBiao: '',\n  //音标\n  word_ArrDef: [],\n  //释例数组, 已经过扁平化一维处理.\n  arr_selectedContent: [],\n  //存放选出的释义与例句内容\n  str_textArea: '' //将选出的内容,放入文本框中. 方便发送给后端node.js来另存文件.\n  //先从json文件中, 拿到所有的kollins单词数据, 并赋值给defaultState对象的arr_KollinsAllWords属性\n\n};\nfn_Set_ArrAllWords(); //调用函数\n//财务专家函数\n\nvar fnReducer = function fnReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var objAction = arguments.length > 1 ? arguments[1] : undefined;\n\n  // console.log('财务专家收到命令书', objAction);\n  if (objAction.type === '命令书_更新WordCurrentFind') {\n    var newState = JSON.parse(_JSON$stringify(state));\n    newState.word_currentFind = objAction.value;\n    return newState;\n  }\n\n  if (objAction.type === '命令书_更新indexStart') {\n    var _newState = JSON.parse(_JSON$stringify(state));\n\n    _newState.index_start = objAction.value;\n    return _newState;\n  }\n\n  if (objAction.type === '命令书_更新indexEnd') {\n    var _newState2 = JSON.parse(_JSON$stringify(state));\n\n    _newState2.index_end = objAction.value;\n    return _newState2;\n  }\n\n  if (objAction.type === '命令书_更新arr_selectedContent') {\n    var _newState3 = JSON.parse(_JSON$stringify(state));\n\n    _newState3.arr_selectedContent.push(objAction.value);\n\n    return _newState3;\n  }\n\n  if (objAction.type === '命令书_从选出内容的数组中删除本元素') {\n    var _newState4 = JSON.parse(_JSON$stringify(state));\n\n    var index = objAction.value; //要删除的数组元素的索引值\n\n    _newState4.arr_selectedContent.splice(index, 1); //删除数组中指定索引处的元素. arrayObject.splice(index,howmany,item1,.....,itemX)\n\n\n    return _newState4;\n  }\n\n  if (objAction.type === '命令书_更新str_textArea') {\n    var _newState5 = JSON.parse(_JSON$stringify(state));\n\n    var str = '';\n    var str词头 = _newState5.word_name + '\\r\\n';\n    var str音标 = _newState5.word_yinBiao + '\\r\\n';\n    var str词根 = '-> ' + _newState5.word_ciGeng + '\\r\\n\\r\\n';\n    str = str词头 + str音标 + str词根;\n    str += moduleMyfunc.fn_将arr_selectedContent转换成str_textArea(_newState5.arr_selectedContent);\n    _newState5.str_textArea = str;\n    return _newState5;\n  } //搜索单个单词,并将内容填充到state中的各对应字段中\n\n\n  if (objAction.type === '命令书_查找SingleWord') {\n    var _newState6 = JSON.parse(_JSON$stringify(state));\n\n    _newState6.word_currentFind = objAction.value;\n    var arrAllWord = _newState6.arr_KollinsAllWords;\n    var length_arrAllWord = _newState6.arr_KollinsAllWords.length;\n\n    for (var _index = 0; _index <= length_arrAllWord, _index++;) {\n      if (arrAllWord[_index][\"key词头\"] === objAction.value) {\n        _newState6.index_wordCurrentFind = _index;\n        _newState6.word_name = arrAllWord[_index][\"key词头\"];\n        _newState6.word_yinBiao = arrAllWord[_index][\"key音标\"];\n        _newState6.word_ciGeng = arrAllWord[_index][\"key词根\"];\n        _newState6.word_ArrDef = moduleMyfunc.fn_处理所有释例到一维数组(arrAllWord[_index][\"key所有释例\"]);\n        _newState6.arr_selectedContent = []; //当重新查询单词时, 就清空上一次选出的内容\n\n        break;\n      }\n    } // newState.arr_KollinsAllWords.forEach((itemWord, index, arr) => {\n    //         if (itemWord[\"key词头\"] === objAction.value) {\n    //             newState.index_wordCurrentFind = index\n    //             newState.word_name = itemWord[\"key词头\"]\n    //             newState.word_yinBiao = itemWord[\"key音标\"]\n    //             newState.word_ciGeng = itemWord[\"key词根\"]\n    //             newState.word_ArrDef = moduleMyfunc.fn_处理所有释例到一维数组(itemWord[\"key所有释例\"])\n    //             newState.arr_selectedContent = [] //当重新查询单词时, 就清空上一次选出的内容\n    //         }\n    //     }\n    // )\n\n\n    return _newState6;\n  }\n\n  if (objAction.type === '命令书_更新arrWordNameInSlice') {\n    var _newState7 = JSON.parse(_JSON$stringify(state));\n\n    _newState7.arr_wordNameInSlice = fn_获取数组切片区间中的词头(_newState7.arr_KollinsAllWords, _newState7.index_start, _newState7.index_end);\n    return _newState7;\n  }\n\n  if (objAction.type === '命令书_获取下20个单词') {\n    var _newState8 = JSON.parse(_JSON$stringify(state));\n\n    _newState8.index_start = _parseInt(_newState8.index_end) + 1;\n    _newState8.index_end = _parseInt(_newState8.index_start) + 19;\n    _newState8.arr_wordNameInSlice = fn_获取数组切片区间中的词头(_newState8.arr_KollinsAllWords, _newState8.index_start, _newState8.index_end);\n    return _newState8;\n  }\n\n  if (objAction.type === '命令书_获取上20个单词') {\n    var _newState9 = JSON.parse(_JSON$stringify(state));\n\n    _newState9.index_start = _parseInt(_newState9.index_start) - 20;\n    _newState9.index_end = _parseInt(_newState9.index_end) - 20;\n    _newState9.arr_wordNameInSlice = fn_获取数组切片区间中的词头(_newState9.arr_KollinsAllWords, _newState9.index_start, _newState9.index_end);\n    return _newState9;\n  }\n\n  if (objAction.type === '命令书_清空str_textArea') {\n    var _newState10 = JSON.parse(_JSON$stringify(state));\n\n    _newState10.str_textArea = ''; //除了清空文本框中的值外\n\n    _newState10.arr_selectedContent = [];\n    /*也要清空选出的句子, 别忘了这一点!\r\n     因为你添加到str_textArea中的句子, 是从arr_selectedContent中来挑选的,\r\n     如果不清空arr_selectedContent, 里面的残留, 会造成str_textArea里的脏数据.\r\n     */\n\n    return _newState10;\n  }\n\n  if (objAction.type === '命令书_可编辑str_textArea') {\n    var _newState11 = JSON.parse(_JSON$stringify(state));\n\n    _newState11.str_textArea = objAction.value;\n    return _newState11;\n  }\n\n  return state; //如果没有进入上面的if语句而返回一个newState, 本函数也要返回一个默认的defaultState.\n};\n\nexport default fnReducer; //----------------------------------------\n//从json文件中, 拿到所有的kollins单词数据, 返回一个promise对象\n\nfunction fnPms_getWordArr_FromJsonFile(_x) {\n  return _fnPms_getWordArr_FromJsonFile.apply(this, arguments);\n} //将拿到的所有柯林斯单词, 赋值给defaultState对象的arr_AllWords属性\n\n\nfunction _fnPms_getWordArr_FromJsonFile() {\n  _fnPms_getWordArr_FromJsonFile = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(urlJson) {\n    var Pms_ArrAllWords;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get(urlJson).then(function (res) {\n              return res.data;\n            })[\"catch\"](function (err) {\n              console.log(err);\n            });\n\n          case 2:\n            Pms_ArrAllWords = _context.sent;\n            return _context.abrupt(\"return\", Pms_ArrAllWords);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fnPms_getWordArr_FromJsonFile.apply(this, arguments);\n}\n\nfunction fn_Set_ArrAllWords() {\n  fnPms_getWordArr_FromJsonFile(defaultState.url_BigArrJsonKollins).then(function (res) {\n    defaultState.arr_KollinsAllWords = res;\n  })[\"catch\"](function (err) {\n    console.log(err);\n  });\n}\n\nfunction fn_获取数组切片区间中的词头(arr, indexStart, indexEnd) {\n  var arrSlice = arr.slice(indexStart, indexEnd);\n  var arrWordName = arrSlice.map(function (item, index, arr) {\n    return item['key词头'];\n  });\n  return arrWordName;\n}","map":{"version":3,"sources":["E:\\phpStorm_proj\\next_Kollins\\store\\fnReducer.js"],"names":["axios","moduleMyfunc","defaultState","url_BigArrJsonKollins","arr_KollinsAllWords","word_currentFind","index_wordCurrentFind","num_OfElementsInSlice","index_start","index_end","arr_wordNameInSlice","word_name","word_ciGeng","word_yinBiao","word_ArrDef","arr_selectedContent","str_textArea","fn_Set_ArrAllWords","fnReducer","state","objAction","type","newState","JSON","parse","value","push","index","splice","str","str词头","str音标","str词根","fn_将arr_selectedContent转换成str_textArea","arrAllWord","length_arrAllWord","length","fn_处理所有释例到一维数组","fn_获取数组切片区间中的词头","fnPms_getWordArr_FromJsonFile","urlJson","get","then","res","data","err","console","log","Pms_ArrAllWords","arr","indexStart","indexEnd","arrSlice","slice","arrWordName","map","item"],"mappings":"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","sourcesContent":["//财务专家\r\n\r\nimport axios from 'axios'\r\nimport * as moduleMyfunc from '../store/myFunc.js'\r\n\r\n\r\n//客户托管在这里的默认的state对象\r\nlet defaultState = {\r\n    // url_BigObjJsonKollins: './static/+json所有柯林斯单词.json', //kollins json路径\r\n    url_BigArrJsonKollins: './static/+arr所有柯林斯单词.json',\r\n    // obj_AllWords: {}, //存放从json文件(一个大的obj对象)中读取到的obj_objJson\r\n    arr_KollinsAllWords: [], //存放从json文件(一个大的数组)中读取到的arr_objJson\r\n\r\n    word_currentFind: '', //当前查找的词头\r\n    index_wordCurrentFind: -1, //当前查找的单词, 在arr_AllWords中的索引值\r\n\r\n    num_OfElementsInSlice: 0, //想切含有多少个元素的切片? 范围是多少? 比如20个元素, 还是30个元素?\r\n    index_start: 0, //数组切片的起始索引值\r\n    index_end: 19, //数组切片的尾索引值\r\n    arr_wordNameInSlice: [], //存放对数组切片后, 里面的所有词头组成的数组\r\n\r\n    word_name: '', //词头\r\n    word_ciGeng: '', //词根\r\n    word_yinBiao: '', //音标\r\n    word_ArrDef: [], //释例数组, 已经过扁平化一维处理.\r\n\r\n    arr_selectedContent: [], //存放选出的释义与例句内容\r\n    str_textArea: '', //将选出的内容,放入文本框中. 方便发送给后端node.js来另存文件.\r\n}\r\n\r\n\r\n//先从json文件中, 拿到所有的kollins单词数据, 并赋值给defaultState对象的arr_KollinsAllWords属性\r\nfn_Set_ArrAllWords() //调用函数\r\n\r\n\r\n//财务专家函数\r\nlet fnReducer = (state = defaultState, objAction) => {\r\n    // console.log('财务专家收到命令书', objAction);\r\n\r\n    if (objAction.type === '命令书_更新WordCurrentFind') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.word_currentFind = objAction.value\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_更新indexStart') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.index_start = objAction.value\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_更新indexEnd') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.index_end = objAction.value\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_更新arr_selectedContent') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.arr_selectedContent.push(objAction.value)\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_从选出内容的数组中删除本元素') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        let index = objAction.value //要删除的数组元素的索引值\r\n        newState.arr_selectedContent.splice(index, 1)//删除数组中指定索引处的元素. arrayObject.splice(index,howmany,item1,.....,itemX)\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_更新str_textArea') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        let str = ''\r\n        let str词头 = newState.word_name + '\\r\\n'\r\n        let str音标 = newState.word_yinBiao + '\\r\\n'\r\n        let str词根 = '-> ' + newState.word_ciGeng + '\\r\\n\\r\\n'\r\n\r\n        str = str词头 + str音标 + str词根\r\n\r\n        str += moduleMyfunc.fn_将arr_selectedContent转换成str_textArea(newState.arr_selectedContent)\r\n        newState.str_textArea = str\r\n        return newState\r\n    }\r\n\r\n\r\n    //搜索单个单词,并将内容填充到state中的各对应字段中\r\n    if (objAction.type === '命令书_查找SingleWord') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.word_currentFind = objAction.value\r\n\r\n        let arrAllWord = newState.arr_KollinsAllWords\r\n        let length_arrAllWord = newState.arr_KollinsAllWords.length\r\n\r\n        for (let index = 0; index <= length_arrAllWord, index++;) {\r\n            if (arrAllWord[index][\"key词头\"] === objAction.value) {\r\n                newState.index_wordCurrentFind = index\r\n                newState.word_name = arrAllWord[index][\"key词头\"]\r\n                newState.word_yinBiao = arrAllWord[index][\"key音标\"]\r\n                newState.word_ciGeng = arrAllWord[index][\"key词根\"]\r\n                newState.word_ArrDef = moduleMyfunc.fn_处理所有释例到一维数组(arrAllWord[index][\"key所有释例\"])\r\n                newState.arr_selectedContent = [] //当重新查询单词时, 就清空上一次选出的内容\r\n                break\r\n            }\r\n        }\r\n\r\n\r\n        // newState.arr_KollinsAllWords.forEach((itemWord, index, arr) => {\r\n        //         if (itemWord[\"key词头\"] === objAction.value) {\r\n        //             newState.index_wordCurrentFind = index\r\n        //             newState.word_name = itemWord[\"key词头\"]\r\n        //             newState.word_yinBiao = itemWord[\"key音标\"]\r\n        //             newState.word_ciGeng = itemWord[\"key词根\"]\r\n        //             newState.word_ArrDef = moduleMyfunc.fn_处理所有释例到一维数组(itemWord[\"key所有释例\"])\r\n        //             newState.arr_selectedContent = [] //当重新查询单词时, 就清空上一次选出的内容\r\n        //         }\r\n        //     }\r\n        // )\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_更新arrWordNameInSlice') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.arr_wordNameInSlice = fn_获取数组切片区间中的词头(newState.arr_KollinsAllWords, newState.index_start, newState.index_end)\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_获取下20个单词') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.index_start = parseInt(newState.index_end) + 1\r\n        newState.index_end = parseInt(newState.index_start) + 19\r\n        newState.arr_wordNameInSlice = fn_获取数组切片区间中的词头(newState.arr_KollinsAllWords, newState.index_start, newState.index_end)\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_获取上20个单词') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.index_start = parseInt(newState.index_start) - 20\r\n        newState.index_end = parseInt(newState.index_end) - 20\r\n        newState.arr_wordNameInSlice = fn_获取数组切片区间中的词头(newState.arr_KollinsAllWords, newState.index_start, newState.index_end)\r\n        return newState\r\n    }\r\n\r\n\r\n    if (objAction.type === '命令书_清空str_textArea') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.str_textArea = '' //除了清空文本框中的值外\r\n        newState.arr_selectedContent = []\r\n        /*也要清空选出的句子, 别忘了这一点!\r\n         因为你添加到str_textArea中的句子, 是从arr_selectedContent中来挑选的,\r\n         如果不清空arr_selectedContent, 里面的残留, 会造成str_textArea里的脏数据.\r\n         */\r\n        return newState\r\n    }\r\n\r\n    if (objAction.type === '命令书_可编辑str_textArea') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.str_textArea = objAction.value\r\n        return newState\r\n    }\r\n\r\n\r\n    return state //如果没有进入上面的if语句而返回一个newState, 本函数也要返回一个默认的defaultState.\r\n}\r\n\r\nexport default fnReducer\r\n\r\n\r\n//----------------------------------------\r\n\r\n//从json文件中, 拿到所有的kollins单词数据, 返回一个promise对象\r\nasync function fnPms_getWordArr_FromJsonFile(urlJson) {\r\n    let Pms_ArrAllWords = await axios.get(urlJson)\r\n        .then(res => {\r\n            return res.data\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n    return Pms_ArrAllWords\r\n}\r\n\r\n\r\n//将拿到的所有柯林斯单词, 赋值给defaultState对象的arr_AllWords属性\r\nfunction fn_Set_ArrAllWords() {\r\n    fnPms_getWordArr_FromJsonFile(defaultState.url_BigArrJsonKollins)\r\n        .then(res => {\r\n            defaultState.arr_KollinsAllWords = res\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n}\r\n\r\n\r\nfunction fn_获取数组切片区间中的词头(arr, indexStart, indexEnd) {\r\n    let arrSlice = arr.slice(indexStart, indexEnd)\r\n    let arrWordName = arrSlice.map((item, index, arr) => {\r\n        return item['key词头']\r\n    })\r\n    return arrWordName\r\n}\r\n"]},"metadata":{},"sourceType":"module"}