{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n//切片显示词头数组\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport objStore from '../store/objStore.js';\nimport * as moduleAction from '../store/fnCreateObjAction.js';\nimport * as moduleActionFactory from \"../store/fnCreateObjAction\";\nimport * as moduleMyfunc from '../store/myFunc.js';\n\nvar Cpn_sliceArrWordName =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Cpn_sliceArrWordName, _React$Component);\n\n  function Cpn_sliceArrWordName(props) {\n    var _this;\n\n    _classCallCheck(this, Cpn_sliceArrWordName);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Cpn_sliceArrWordName).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"fn_updateThisState\", function () {\n      //一旦监听到财务专家更新了state对象, 就执行本回调函数\n      _this.setState(objStore.getState());\n    });\n\n    _this.state = objStore.getState(); //从银行拿到默认的state对象\n\n    objStore.subscribe(_this.fn_updateThisState);\n    return _this;\n  }\n\n  _createClass(Cpn_sliceArrWordName, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", null, \"indexStart:\", React.createElement(\"input\", {\n        type: \"text\",\n        size: \"5\",\n        value: this.state.index_start,\n        onChange: function onChange() {\n          moduleMyfunc.fn_发送命令书_更新indexStart(event);\n        }\n      }), \"- indexEnd:\", React.createElement(\"input\", {\n        type: \"text\",\n        size: \"5\",\n        value: this.state.index_end,\n        onChange: function onChange() {\n          moduleMyfunc.fn_发送命令书_更新indexEnd(event);\n        }\n      }), React.createElement(\"input\", {\n        type: \"button\",\n        value: '显示切片(数组)中的词头',\n        onClick: function onClick() {\n          moduleMyfunc.fn_发送命令书_获取切片中的词头数组();\n        }\n      }), \"\\xA0\", React.createElement(\"input\", {\n        type: \"button\",\n        value: \"\\u4E0B20\\u4E2A\\u5355\\u8BCD\",\n        onClick: function onClick() {\n          moduleMyfunc.fn_发送命令书_获取下20个单词();\n        }\n      }), \"\\xA0\", React.createElement(\"input\", {\n        type: \"button\",\n        value: \"\\u4E0A20\\u4E2A\\u5355\\u8BCD\",\n        onClick: function onClick() {\n          moduleMyfunc.fn_发送命令书_获取上20个单词();\n        }\n      }), React.createElement(\"p\", null, \"index [\", this.state.index_start, \"-\", this.state.index_end, \"] \\u4E2D\\u7684\\u8BCD\\u5934\\u6709:\"), React.createElement(\"div\", {\n        style: objCss.容器\n      }, this.state.arr_wordNameInSlice.map(function (itemWordName, index, arr) {\n        return React.createElement(\"span\", {\n          key: index,\n          style: objCss.子项,\n          onClick: function onClick() {\n            moduleMyfunc.fn_发送命令书_搜索单词(event.target.innerText);\n          }\n        }, itemWordName);\n      }))), React.createElement(\"hr\", null));\n    }\n  }]);\n\n  return Cpn_sliceArrWordName;\n}(React.Component); //----------------------------------------\n\n\nexport { Cpn_sliceArrWordName as default };\nvar objCss = {\n  容器: {\n    /*里面有专属于容器的flex属性*/\n    display: 'flex',\n    height: '200px',\n    border: \"solid 1px\",\n    // flexDirection: 'row-reverse', /*每行中的元素, 从右到左排*/\n    flexWrap: 'wrap',\n\n    /*一行超过容器宽度, 就换行*/\n    alignContent: \"flex-start\",\n    //行与行的行距, 不平均分配容器的高度, 而是采用默认的固定行距.\n    overflow: \"auto\" //超出高度则使用滚动条,\n\n  },\n  子项: {\n    /*里面有专属于子项的flex属性*/\n    width: '33.33%' // flexGrow: 1, //一行中无论有几个元素, 都平均分配容器的宽度\n\n  }\n};","map":{"version":3,"sources":["E:\\phpStorm_proj\\next_Kollins\\pages\\Cpn_sliceArrWordName.jsx"],"names":["React","ReactDOM","objStore","moduleAction","moduleActionFactory","moduleMyfunc","Cpn_sliceArrWordName","props","setState","getState","state","subscribe","fn_updateThisState","index_start","fn_发送命令书_更新indexStart","event","index_end","fn_发送命令书_更新indexEnd","fn_发送命令书_获取切片中的词头数组","fn_发送命令书_获取下20个单词","fn_发送命令书_获取上20个单词","objCss","容器","arr_wordNameInSlice","map","itemWordName","index","arr","子项","fn_发送命令书_搜索单词","target","innerText","Component","display","height","border","flexWrap","alignContent","overflow","width"],"mappings":"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","sourcesContent":["//切片显示词头数组\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport objStore from '../store/objStore.js'\r\nimport * as moduleAction from '../store/fnCreateObjAction.js'\r\nimport * as moduleActionFactory from \"../store/fnCreateObjAction\";\r\nimport * as moduleMyfunc from '../store/myFunc.js'\r\n\r\nexport default class Cpn_sliceArrWordName extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = objStore.getState() //从银行拿到默认的state对象\r\n        objStore.subscribe(this.fn_updateThisState)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <div>\r\n                    {/*切片区间的输入框*/}\r\n                    indexStart:<input type=\"text\"\r\n                                      size='5'\r\n                                      value={this.state.index_start}\r\n                                      onChange={() => {\r\n                                          moduleMyfunc.fn_发送命令书_更新indexStart(event)\r\n                                      }}/>\r\n                    - indexEnd:<input type=\"text\"\r\n                                      size='5'\r\n                                      value={this.state.index_end}\r\n                                      onChange={() => {\r\n                                          moduleMyfunc.fn_发送命令书_更新indexEnd(event)\r\n                                      }}/>\r\n\r\n                    <input type=\"button\"\r\n                           value={'显示切片(数组)中的词头'}\r\n                           onClick={() => {\r\n                               moduleMyfunc.fn_发送命令书_获取切片中的词头数组()\r\n                           }}\r\n                    />\r\n                    &nbsp;\r\n\r\n\r\n                    {/*下20个单词*/}\r\n                    <input type=\"button\" value='下20个单词'\r\n                           onClick={() => {\r\n                               moduleMyfunc.fn_发送命令书_获取下20个单词()\r\n                           }}\r\n                    />\r\n                    &nbsp;\r\n\r\n                    {/*上20个单词*/}\r\n                    <input type=\"button\" value='上20个单词'\r\n                           onClick={() => {\r\n                               moduleMyfunc.fn_发送命令书_获取上20个单词()\r\n                           }}\r\n                    />\r\n\r\n\r\n                    {/*显示切片区间中的所有词头*/}\r\n                    <p>index [{this.state.index_start}-{this.state.index_end}] 中的词头有:</p>\r\n\r\n                    <div style={objCss.容器}>\r\n                        {this.state.arr_wordNameInSlice.map((itemWordName, index, arr) => {\r\n                            return <span key={index} style={objCss.子项}\r\n                                         onClick={() => {\r\n                                             moduleMyfunc.fn_发送命令书_搜索单词(event.target.innerText)\r\n                                         }}\r\n                            >{itemWordName}</span>\r\n                        })}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <hr/>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n\r\n    fn_updateThisState = () => { //一旦监听到财务专家更新了state对象, 就执行本回调函数\r\n        this.setState(objStore.getState())\r\n    }\r\n\r\n}\r\n\r\n//----------------------------------------\r\n\r\nlet objCss = {\r\n    容器: { /*里面有专属于容器的flex属性*/\r\n        display: 'flex',\r\n        height: '200px',\r\n        border: \"solid 1px\",\r\n        // flexDirection: 'row-reverse', /*每行中的元素, 从右到左排*/\r\n        flexWrap: 'wrap', /*一行超过容器宽度, 就换行*/\r\n        alignContent: \"flex-start\", //行与行的行距, 不平均分配容器的高度, 而是采用默认的固定行距.\r\n        overflow: \"auto\", //超出高度则使用滚动条,\r\n    },\r\n\r\n    子项: { /*里面有专属于子项的flex属性*/\r\n        width: '33.33%',\r\n        // flexGrow: 1, //一行中无论有几个元素, 都平均分配容器的宽度\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}