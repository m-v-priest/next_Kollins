{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\n//财务专家\nvar defaultState = {\n  // url_BigObjJsonKollins: './static/+json所有柯林斯单词.json', //kollins json路径\n  url_BigArrJsonKollins: './static/+arr所有柯林斯单词.json',\n  // obj_AllWords: {}, //存放从json文件(一个大的obj对象)中读取到的obj_objJson\n  arr_AllWords: [],\n  //存放从json文件(一个大的数组)中读取到的arr_objJson\n  word_currentFind: '',\n  //当前查找的词头\n  index_wordCurrentFind: -1,\n  //当前查找的单词, 在arr_AllWords中的索引值\n  num_OfElementsInSlice: 0,\n  //想切含有多少个元素的切片? 范围是多少? 比如20个元素, 还是30个元素?\n  index_start: 0,\n  //数组切片的起始索引值\n  index_end: 19,\n  //数组切片的尾索引值\n  arr_wordNameInSlice: [],\n  //存放对数组切片后, 里面的所有词头组成的数组\n  word_name: '',\n  //词头\n  word_ciGeng: '',\n  //词根\n  word_yinBiao: '',\n  //音标\n  word_ArrDef: [],\n  //释例数组, 已经过扁平化一维处理.\n  arr_selectedContent: [],\n  //存放选出的释义与例句内容\n  str_textArea: '' //将选出的内容,放入文本框中. 方便发送给后端node.js来另存文件.\n\n};\n\nvar fnReducer = function fnReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var objAction = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (objAction.type === '命令书_更新newSave') {\n    var newState = JSON.parse(_JSON$stringify(state));\n    newState.newSave = objAction.value;\n    return newState;\n  }\n\n  return state;\n};\n\nexport default fnReducer;","map":{"version":3,"sources":["C:\\Users\\mvpri\\PhpstormProjects\\next\\store\\fnReducer.js"],"names":["defaultState","url_BigArrJsonKollins","arr_AllWords","word_currentFind","index_wordCurrentFind","num_OfElementsInSlice","index_start","index_end","arr_wordNameInSlice","word_name","word_ciGeng","word_yinBiao","word_ArrDef","arr_selectedContent","str_textArea","fnReducer","state","objAction","type","newState","JSON","parse","newSave","value"],"mappings":";AAAA;AAEA,IAAIA,YAAY,GAAG;AACf;AACAC,EAAAA,qBAAqB,EAAE,2BAFR;AAGf;AACAC,EAAAA,YAAY,EAAE,EAJC;AAIG;AAElBC,EAAAA,gBAAgB,EAAE,EANH;AAMO;AACtBC,EAAAA,qBAAqB,EAAE,CAAC,CAPT;AAOY;AAE3BC,EAAAA,qBAAqB,EAAE,CATR;AASW;AAC1BC,EAAAA,WAAW,EAAE,CAVE;AAUC;AAChBC,EAAAA,SAAS,EAAE,EAXI;AAWA;AACfC,EAAAA,mBAAmB,EAAE,EAZN;AAYU;AAEzBC,EAAAA,SAAS,EAAE,EAdI;AAcA;AACfC,EAAAA,WAAW,EAAE,EAfE;AAeE;AACjBC,EAAAA,YAAY,EAAE,EAhBC;AAgBG;AAClBC,EAAAA,WAAW,EAAE,EAjBE;AAiBE;AAEjBC,EAAAA,mBAAmB,EAAE,EAnBN;AAmBU;AACzBC,EAAAA,YAAY,EAAE,EApBC,CAoBG;;AApBH,CAAnB;;AAwBA,IAAIC,SAAS,GAAG,SAAZA,SAAY,GAAqC;AAAA,MAApCC,KAAoC,uEAA5BhB,YAA4B;AAAA,MAAdiB,SAAc;;AAEjD,MAAIA,SAAS,CAACC,IAAV,KAAmB,eAAvB,EAAwC;AACpC,QAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAW,gBAAeL,KAAf,CAAX,CAAf;AACAG,IAAAA,QAAQ,CAACG,OAAT,GAAmBL,SAAS,CAACM,KAA7B;AACA,WAAOJ,QAAP;AACH;;AAGD,SAAOH,KAAP;AACH,CAVD;;AAYA,eAAeD,SAAf","sourcesContent":["//财务专家\r\n\r\nlet defaultState = {\r\n    // url_BigObjJsonKollins: './static/+json所有柯林斯单词.json', //kollins json路径\r\n    url_BigArrJsonKollins: './static/+arr所有柯林斯单词.json',\r\n    // obj_AllWords: {}, //存放从json文件(一个大的obj对象)中读取到的obj_objJson\r\n    arr_AllWords: [], //存放从json文件(一个大的数组)中读取到的arr_objJson\r\n\r\n    word_currentFind: '', //当前查找的词头\r\n    index_wordCurrentFind: -1, //当前查找的单词, 在arr_AllWords中的索引值\r\n\r\n    num_OfElementsInSlice: 0, //想切含有多少个元素的切片? 范围是多少? 比如20个元素, 还是30个元素?\r\n    index_start: 0, //数组切片的起始索引值\r\n    index_end: 19, //数组切片的尾索引值\r\n    arr_wordNameInSlice: [], //存放对数组切片后, 里面的所有词头组成的数组\r\n\r\n    word_name: '', //词头\r\n    word_ciGeng: '', //词根\r\n    word_yinBiao: '', //音标\r\n    word_ArrDef: [], //释例数组, 已经过扁平化一维处理.\r\n\r\n    arr_selectedContent: [], //存放选出的释义与例句内容\r\n    str_textArea: '', //将选出的内容,放入文本框中. 方便发送给后端node.js来另存文件.\r\n}\r\n\r\n\r\nlet fnReducer = (state = defaultState, objAction) => {\r\n\r\n    if (objAction.type === '命令书_更新newSave') {\r\n        let newState = JSON.parse(JSON.stringify(state))\r\n        newState.newSave = objAction.value\r\n        return newState\r\n    }\r\n\r\n\r\n    return state\r\n}\r\n\r\nexport default fnReducer"]},"metadata":{},"sourceType":"module"}